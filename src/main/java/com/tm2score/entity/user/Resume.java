package com.tm2score.entity.user;


import com.tm2score.global.I18nUtils;
import com.tm2score.service.LogService;
import com.tm2score.util.JsonUtils;
import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;
import java.io.Serializable;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.Transient;
import java.util.Date;
import java.util.Locale;


@Entity
@Table( name = "resume" )
@NamedQueries( {
        @NamedQuery( name = "Resume.findByResumeId", query = "SELECT o FROM Resume AS o WHERE o.resumeId=:resumeId"),        
        @NamedQuery( name = "Resume.findByUserId", query = "SELECT o FROM Resume AS o WHERE o.userId=:userId")        
} )
public class Resume implements Serializable
{
    @Transient
    private static final long serialVersionUID = 1L;


    @Id
    @GeneratedValue( strategy = GenerationType.IDENTITY )
    @Column( name = "resumeid" )
    private int resumeId;

    @Column( name = "userid" )
    private long userId;
    
    @Column( name = "orgid" )
    private int orgId;
        
    /*
     0 = active
     99 = archived
    */
    @Column( name = "resumestatustypeid" )
    private int resumeStatusTypeId;

    @Column( name = "localestr" )
    private String localeStr;
    

    /*
    {
      "objective":"",
      "education":"",
      "experience":"",
      "otherquals":""
    }
    */    
    @Column( name = "jsonstr" )
    private String jsonStr;    
    
    /*
     Text summary of the resume. Can be initially generated by AI
    */
    @Column( name = "summary" )
    private String summary;
    
    @Column( name = "uploadedtext" )
    private String uploadedText;
    
    @Column( name = "plaintext" )
    private String plainText;

    @Temporal( TemporalType.TIMESTAMP )
    @Column( name = "createdate" )
    private Date createDate;

    @Temporal( TemporalType.TIMESTAMP )
    @Column( name = "lastupdate" )
    private Date lastUpdate;

    @Transient
    String objective;
    
    @Transient
    String education;
    
    @Transient
    String experience;
    
    @Transient
    String otherQuals;
    
    

    
    
    
    
    public boolean getHasAnyFormData()
    {
        return (objective!=null && !objective.isBlank()) || 
               (education!=null && !education.isBlank()) || 
               (experience!=null && !experience.isBlank()) || 
               (otherQuals!=null && !otherQuals.isBlank());
    }
    
    public Locale getLocale()
    {
        if( localeStr==null || localeStr.isBlank() )
            return Locale.US;
        
        return I18nUtils.getLocaleFromCompositeStr(localeStr);
    }
    
    
    public void packJsonStr() throws Exception
    {
        if( !getHasAnyFormData() )
        {
            jsonStr = null;
            return;
        }
                
        boolean found = false;
        try
        {
            JsonObjectBuilder topJob = Json.createObjectBuilder();
            
            if( objective!=null && !objective.isBlank() )
            {
                topJob.add( "objective", objective );
                found=true;
            }

            if( education!=null && !education.isBlank() )
            {
                topJob.add( "education", education );
                found=true;
            }
            
            if( experience!=null && !experience.isBlank() )
            {
                topJob.add("experience", experience );
                found=true;
            }

            if( otherQuals!=null && !otherQuals.isBlank() )
            {
                topJob.add("otherQuals", otherQuals );
                found=true;
            }

            if( found )
                jsonStr = JsonUtils.getPrettyJsonStr( JsonUtils.convertJsonObjecttoString(topJob.build() ) );
            else
                jsonStr = null;
        }
        catch( Exception e )
        {
            LogService.logIt( e, "Resume.packJsonStr() " + toString() );
            throw e;
        }
    }

    public synchronized void parseJsonStr() throws Exception
    {
        // do not overwrite.
        if( objective!=null && !objective.isBlank() )
            return;
        if( education!=null && !education.isBlank() )
            return;        
        if( experience!=null && !experience.isBlank() )
            return;        
        if( otherQuals!=null && !otherQuals.isBlank() )
            return;
                
        if( jsonStr==null || jsonStr.isBlank() )
        {
            this.objective="";
            this.education="";
            this.experience="";
            this.otherQuals="";
            return;
        }

        try
        {
            JsonObject  jo = JsonUtils.convertJsonStringtoObject(jsonStr );
            
            if( jo==null )
                return;
            
            if( jo.containsKey("objective") && !jo.isNull("objective"))
            {
                objective = JsonUtils.getStringFmJson(jo, "objective");
            }
            if( jo.containsKey("education") && !jo.isNull("education"))
            {
                education = JsonUtils.getStringFmJson(jo, "education");
            }
            if( jo.containsKey("experience") && !jo.isNull("experience"))
            {
                experience = JsonUtils.getStringFmJson(jo, "experience" );
            }
            if( jo.containsKey("otherquals") && !jo.isNull("otherquals"))
            {
                otherQuals = JsonUtils.getStringFmJson(jo, "otherquals" );
            }
        }
        catch( Exception e )
        {
            LogService.logIt( e, "Resume.parseJsonStr() " + toString() );
            throw e;
        }
    }
    

    
    
    
    
    public int getResumeId() {
        return resumeId;
    }

    public void setResumeId(int resumeId) {
        this.resumeId = resumeId;
    }

    public int getResumeStatusTypeId() {
        return resumeStatusTypeId;
    }

    public void setResumeStatusTypeId(int resumeStatusTypeId) {
        this.resumeStatusTypeId = resumeStatusTypeId;
    }

    public String getLocaleStr() {
        return localeStr;
    }

    public void setLocaleStr(String localeStr) {
        this.localeStr = localeStr;
    }


    public String getSummary() {
        return summary;
    }

    public void setSummary(String summary) {
        this.summary = summary;
    }

    public String getUploadedText() {
        return uploadedText;
    }

    public void setUploadedText(String uploadedText) {
        this.uploadedText = uploadedText;
    }

    public String getPlainText() {
        return plainText;
    }

    public void setPlainText(String plainText) {
        this.plainText = plainText;
    }

    public long getUserId() {
        return userId;
    }

    public void setUserId(long userId) {
        this.userId = userId;
    }

    public int getOrgId() {
        return orgId;
    }

    public void setOrgId(int orgId) {
        this.orgId = orgId;
    }

    public Date getCreateDate() {
        return createDate;
    }

    public void setCreateDate(Date createDate) {
        this.createDate = createDate;
    }

    public Date getLastUpdate() {
        return lastUpdate;
    }

    public void setLastUpdate(Date lastUpdate) {
        this.lastUpdate = lastUpdate;
    }

    public String getObjective() {
        return objective;
    }

    public void setObjective(String objective) {
        this.objective = objective;
    }

    public String getEducation() {
        return education;
    }

    public void setEducation(String education) {
        this.education = education;
    }

    public String getExperience() {
        return experience;
    }

    public void setExperience(String experience) {
        this.experience = experience;
    }

    public String getOtherQuals() {
        return otherQuals;
    }

    public void setOtherQuals(String otherQuals) {
        this.otherQuals = otherQuals;
    }

    
}
